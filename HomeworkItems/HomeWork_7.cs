/*
	Практическое задание 7.

	Класс HashSet<T> содержит неупорядоченный список различающихся элементов, 
	а в SortedSet<T> элементы упорядочены. При использовании данных контейнерах 
	будет весомый прирост производительности на больших коллекциях, так как 
	некоторые операции выполняются быстрее (например Contains, Remove, Add 
	выполняются за O(1)).
	
		* Удобно, когда нужно иметь только уникальные элементы массива
	
	Класс ObservableCollection. Он по функциональности похож на список List 
	за тем исключением, что позволяет известить внешние объекты о том, что 
	коллекция была изменена.
	
		* Удобно было бы применять, когда есть выпадающий список, и при добавлени 
		элементов в список он сразу бы обновился. Встречал такое при работе с XAML.
*/
public void Main()
{
	ObservableCollection<User> users = new ObservableCollection<User>
	{
		new User("Kastel", "Mihalson"),
		new User("Thor", "Odinson"),
		new User("Loki", "Lafeyson")
	};

	users.CollectionChanged += Users_CollectionChanged;

	users.Add(new User("Hela", "Odindauther"));
}

private void Users_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
{
	switch (e.Action)
	{
		case NotifyCollectionChangedAction.Add:
				// "Добавлен новый объект"
			break;
		default:
			break;
	}
}

/*
	Класс Dictionary<TKey, TValue> позволяет хранить пары «ключ-значение» 
	в коллекции, как в словаре. Словари имеют динамический характер, 
	расширяясь по мере необходимости.
	
		* В моем случае, я использовал словарь, как набор названий для цветов,
		и в качестве значений их 16-ричные значения. При использовании можно 
		обращаться к словарю по индексу, передавая элемент перечисления.
	
	Класс Queue представляет обычную очередь, работающую по алгоритму FIFO 
	(«первый вошел – первый вышел»).
	
	Класс Stack представляет коллекцию, которая использует алгоритм LIFO 
	(«последний вошел – первый вышел»). При такой организации каждый 
	следующий добавленный элемент помещается поверх предыдущего. 
	Извлечение из коллекции происходит в обратном порядке: извлекается 
	тот элемент, который находится выше всех в стеке.
	
		* Для отменя операций. После каждой операции записывать ее в стек,
		и при нажатии на кнопку отменить последнее действия извлекать значение
		и откатится до нужного состояния.
	
*/